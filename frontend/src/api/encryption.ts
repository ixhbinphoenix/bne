import { PBKDF2, enc, AES, lib } from "crypto-js";

const salt = "";
const iterations = 40000;

/**
 * 
 * @param password Password used to generate key
 * @returns Generated key in hex format
 * 
 */

export function generateKey(password: string): string {
    const key = PBKDF2(password, salt, { keySize: 8, iterations: iterations})
    return key.toString(enc.Hex);
}

/**
 * 
 * @param key Key to encrypt data
 * @param plainText Text to encrypt
 * @returns ```lib.CipherParams``` format to return info about encrypted data:
 * ```js
 * var encrypted = passwordEncrypt("key", "plainText");
 * 
 * var iv = encrypted.iv; //iv used for decrypting
 * var encryptedText = encrypted.toString(); //encrypted text
 * â €
 * ```
 */

export function passwordEncrypt(key: string, plainText: string): lib.CipherParams {
    const encrypted = AES.encrypt(plainText, key);
    return encrypted;
}

/**
 * 
 * @param key Key to decrypt data
 * @param iv Iv generated by ```passwordEncrypt()```
 * @param encryptedText Encrypted text generated by ```passwordEncrypt()```
 * @returns Decrypted text in UTF-8
 * ```js
 * var decrypted = passwordDecrypt("key", iv, "encryptedText"); //returns decrypted text
 * ```
 */

export function passwordDecrypt(key: string, iv: lib.WordArray, encryptedText: string): string {
    const decrypted = AES.decrypt(encryptedText, key, { iv: iv });

    return enc.Utf8.stringify(decrypted);
}

